<?xml version="1.0" encoding="UTF-8"?>
<database>
    <!--테이블 결합-->

    <!--UNION ALL은 중복항목이 있으면 다 포함한다.
    중복을 빼려면 UNION을 쓰자. BUT DISTICNT와 비슷한 기능을 해서 지양해야 한다.-->
    <query id="unionAll">
        SELECT
            ENAME AS ENAME_AND_DNAME,
            DEPT_NO
        FROM EMP
            WHERE DEPT_NO = 10
        UNION ALL
        SELECT '-------------', NULL
            FROM T1
        UNION ALL
            SELECT DNAME_DEPT_NO
        FROM DEPT
    </query>

    <!--E.DEPTNO와 D.DEPTNO가 '같은 것'만 가져오기-->
    <query id="equiJoin">
        SELECT E.ENAME, D.LOC
            FROM EMP E, DEPT D
        WHERE E.DEPTNO = D.DEPTNO
            AND E.DEPNO = 10
    </query>

    <query id="equiJoin2">
        SELECT E.ENAME, D.LOC,
                D.DEPTNO AS EMP_DEPTNO,
                D.DEPTNO AS DEPT_DEPTNO
        FROM EMP E, DEPT D
            WHERE E.EPTNO = D.DEPTNO
            AND E.DEPTNO = 10
    </query>

    <query id="innerJoin">
        SELECT E.ENAME, D.LOC
            FROM EMP E
        INNER JOIN DEPT D
            ON E.DEPTNO = D.DEPTNO
        WHERE E.DEPTNO = 10
    </query>

    <query id="findSameValue">
        SELECT E.EMPNO, E.ENAME, E.JOB, E.SAL, E.DEPTNO
            FROM EMP E, V
        WHERE E.ENAME = V.ENAME
            AND E.JOB = V.JOB
            AND E.SAL = V.SAL
    </query>

    <query id="findSameValue2">
        SELECT E.EMPNO, E.ENAME, E.JOB, E.SAL, E.DEPTNO
            FROM EMP E
        INNER JOIN V
            ON E.ENAME = V.ENAME
            AND E.JOB = V.JOB
            AND E.SAL = V.SAL
    </query>

    <!--한 테이블에서 다른 테이블에 없는 값 검색하기 (차집합) -->
    <query id="notIn">
        SELECT DEPTNO
            FROM DEPT
        WHERE DEPTNO NOT IN (SELECT DEPTNO FROM EMP)
    </query>

    <query id="distinctNotIn">
        SELECT DISTINCT DEPTNO
            FROM DEPT
        WHERE DEPTNO NOT IN (SELECT DEPTNO FROM EMP)
    </query>

    <!--결과: 10-->
    <!--IN과 NOT IN은 본질적으로 OR연산이다.
    DEPTNO =10 OR =50 OR =NULL
    T OR F OR N
    T OR N
    T-->
    <query id="nullInSubQuery">
        SELECT DEPTNO
            FROM DEPT
        WHERE DEPTNO IN (10, 50, NULL)
    </query>

    <!--결과: 10-->
    <query id="nullInSubQuery2">
        SELECT DEPTNO
            FROM DEPT
        WHERE (DEPTNO = 10 OR DEPTNO = 50 OR DEPTNO = NULL)
    </query>

    <!--결과: NO ROWS-->
    <query id="nullInSubQuery3">
        SELECT DEPT_NO
            FROM DEPT
        WHERE DEPT_NO NOT IN (10, 50, NULL)
    </query>

    <!--결과: NO ROWS-->
    <query id="nullInsSubQuery4">
            SELECT DEPT_NO
        FROM DEPT
            WHERE NOT (DEPT_NO=10 OR DEP_NO=50 OR DEPT_NO=NULL)
    </query>

    <!-- TRUE OR NULL = TRUE / FALSE OR NULL = NULL -->

    <query id="notExists">
        SELECT D.DEPT_NO
            FROM DEPT D
        WHERE NOT EXISTS (
            SELECT 1
            FROM EMP E
            WHERE D.DEPT_NO = E.DEPT_NO
        )
    </query>

    <!--왼쪽은 무조건 표시하고, 오른쪽이랑 매치되는게 없으면 NULL을 표시한다.-->
    <query id="leftOuterJoin">
        SELECT D.*
            FROM DEPT D
        LEFT OUTER JOIN EMP E
            ON D.DEPT_NO = E.DEPT_NO
        WHERE E.DEPT_NO IS NULL
    </query>

    <!--다른 조인을 방해하지 않고 쿼리에 조인 추가할 수 있다.
    데이터 손실 없이 기준 테이블의 해당 레코드는 다 표시하지만
    추가 정보(조인할 테이블)를 얻고싶을 경우-->
    <query id="leftOuterJoin">
        SELECT E.ENAME, D.LOC, EB.RECEIVED
            FROM EMP E
        INNER JOIN DEPT D
            ON E.DEPTNO = D.DEPTNO
        LEFT OUTER JOIN EMP_BONUS EB
            ON E.EMPNO = EB.EMPNO
        ORDER BY 2
    </query>

    <!--스칼라 서브쿼리: SELECT에 있는 서브쿼리 를 통해 외부조인을 흉내낼 수 있다.-->
    <query id="scalarSubQuery">
        SELECT E.ENAME, D.LOC,
            (SELECT EB.RECEIVED FROM EMP_BONUS EB WHERE EB.EMP_NO = E.EMP_NO) AS RECEIVED
        FROM EMP E, DEPT D
            WHERE E.DEPTNO = D.DEPTNO
        ORDER BY 2
    </query>

    <!--차집합 찾기-->
    <query id="unionAll">
        SELECT *
        FROM (
                SELECT E.EMPNO, E.ENAME, E.JOB, E.MGR, E.HIREDATE,
                E.SAL, E.COMM, E.DEPTNO, COUNT(*) AS CNT
                FROM EMP E
                GROUP BY EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMMM, DEPTNO
            ) E
        WHERE NOT EXISTS (
            SELECT NULL
            FROM (
                SELECT V.EMPNO, V.ENAME, V.JOB, V.MGR, V.HIREDATE,
                V.SAL, V.COMM, V.DEPTNO, COUNT(*) AS CNT
                FROM V
                GROUP BY EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM, DEPTNO
            ) V
            WHERE V.EMPNO     = E.EMPNO
            AND V.ENAME       = E.ENAME
            AND V.JOB         = E.JOB
            AND COALESCE(V.MGR,0) = COALESCE(E.MGR,0)
            AND V.HIREDATE    = E.HIREDATE
            AND V.SAL         = E.SAL
            AND V.DEPTNO      = E.DEPTNO
            AND V.CNT         = E.CNT
            AND COALESCE(V.COMM,0) = COALESCE(E.COMM,0)
        )
            UNION ALL
        SELECT *
        FROM (
            SELECT V.EMPNO, V.ENAME, V.JOB, V.MGR, V.HIREDATE,
                    V.SAL, V.COMM, V.DEPTNO, COUNT(*) AS CNT
            FROM V
            GROUP BY EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM, DEPTNO
        ) V
        WHERE NOT EXISTS (
            SELECT NULL
            FROM (
                SELECT E.EMPNO, E.ENAME, E.JOB, E.MGR, E.HIREDATE,
                        E.SAL, E.COMM, E.DEPTNO, COUNT(*) AS CNT
                FROM EMP E
                GROUP BY EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM, DEPTNO
            ) E
            WHERE V.EMPNO       = E,EMPNO
              AND V.ENAME       = E.ENAME
              AND V.JOB         = E.JOB
              AND COALESCE(V.MGR,0) = COALESCE(E.MGR,0)
              AND V.HIREDATE    = E.HIREDATE
              AND V.SAL         = E.SAL
              AND V.DEPTNO      = E.DEPTNO
              AND V.CNT         = E.CNT
              AND COALESCE(V.COMM,0) = COALESCE(E.COMM,0)
        )

        <!--1. EMP 테이블의 행 가운데, 뷰 V에 존재하지 않는 행을 찾는다.
        2. EMP 테이블에 없는 뷰 V의 행과 1번 행을 결합(UNION ALL)한다.

        -> 두 테이블이 동일하면 결과는 반환되지 않는다.
        테이블이 다르면 차이가 있는 레코드를 반환한다.-->
    </query>

    <!--두 테이블이 동일한건지 카디널리티로만 확인하는 방법2
    UNION은 중복을 제거하므로 테이블의 카디널리티가 같으면 하나의 행만 반환된다.
    두 행이 반환된다면 두 테이블에서 서로 다른 행이 포함되어 있다는 걸 알 수 있다.-->
    <query id="union">
        SELECT COUNT(*)
        FROM EMP
        UNION
        SELECT COUNT(*)
        FROM DEPT
    </query>

</database>